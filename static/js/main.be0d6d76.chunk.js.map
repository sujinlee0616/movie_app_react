{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oUAsCeA,MAjCf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACA,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAG9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,iBAAiBI,OAG/C,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAE,KAA/C,UC4ESC,G,iNAxFbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAgBAC,IAAMC,IAAI,6CAhBV,gBAcEJ,EAdF,EAaRK,KACEA,KAAQL,OAIZ,EAAKM,SAAS,CAAEN,OAAQA,EAAQD,WAAW,IAlBjC,2C,mFAyBVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASX,UAAU,aAGhBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAAAgB,GAAK,OAEf,kBAAC,EAAD,CACEb,IAAKa,EAAMC,GACXA,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,kB,GArDZuB,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.be0d6d76.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\"; \n\n// tate가 필요X ==> class component로 만들 필요 없음. function component로 만들면 됨.\nfunction Movie({ year, title, summary, poster, genres }) {\n  return (\n  <div className=\"movie\">\n    <img src={poster} alt={title} title={title}/>\n    <div className=\"movie__data\">\n      <h3 className=\"movie__title\">{title}</h3> \n      {/* <h3 class=\"movie__title\" style={{backgroundColor: \"pink\"}}>{title}</h3>  */}\n      {/* 위와 같이 style={{}}해서도 스타일 줄 수 있다. : javascript 위에 CSS 코딩하는 방식. */}\n      <h5 className=\"movie__year\">{year}</h5>\n      <ul className=\"movie__genres\">\n        {genres.map((genre, index) => ( // index: map에서 자동으로 생김. \n          <li key={index} className=\"genres__genre\">{genre}</li> \n        ))}\n      </ul>\n      <p className=\"movie__summary\">{summary.slice(0,140)}...</p> \n      {/* summary 140글자까지 자르고 ... 넣어줬음 */}\n    </div>\n    \n  </div>\n  );\n}\n\nMovie.propTypes = {\n  // API 보고 타입 정리. API -  https://yts.mx/api/v2/list_movies.json\n  // API Documentation: https://yts.mx/api\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\"; \n\n// #3.3 Planning the Movie Component\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    // axios.get하는데 시간 오래 걸릴 수 있음 (데이터가 많다보니 ㅠㅠ)\n    // ==> async(비동기) 함수로 만들었음\n    // await는 axios.get이 끝날때까지 기다림.\n    // <axios>\n    // - HTTP통신을 하는데 매우 인기있는 Javascript라이브러리.\n    // - fetch 위에 있는 레이어 같은 느낌.\n    // - 우리는 fetch 대신 axios를 사용할 예정.\n    // console.log(movies);  // console에서 확인해보니, movies 안에 data 안에 data 안에 movies에 데이터가 들어가고 있었음.\n    // console.log(movies.data.data.movies);  // 영화 데이터 20개씩 잘 나오는거 확인했음\n    // ==> 위에서 const movies에 axios.get해서 object를 넣었는데, 그러지 말고 아래와 같이 const movies에 바로 영화 데이터 들어가게 해주자.\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    // console.log(movies);\n    this.setState({ movies: movies, isLoading: false });\n    // movies 중 하나는 setState의 movies고, 다른 하나는 axios에서 가져온 movies. this.setState({movies}); 이렇게 적어도 알아서 똑똑하게 잘 출력해줌.\n  };\n  componentDidMount() {\n    // setTimeout(() => { // setTimeout(): 타이머가 만료된 뒤 함수나 지정된 코드가 실행됨.\n    //     this.setState({isLoading:false});\n    // }, 6000);\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\"> \n        {/* JSX에서는 tag에 class 대신 className을 쓴다. */}\n        {/* 컴포넌트의 class(class App extends React.Component)와 헷갈리기 때문. */}\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n            //console.log(movie); \n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section> //movies.map(): movies를 render한다.\n    );\n  }\n}\n\n// #3 State : #3.0~#3.2\n// class App extends React.Component{ // <== class Component\n//     state = { // state에 바꾸고 싶은 데이터를 넣는다.\n//         count: 0\n//     };\n//     add = () => {\n//         // console.log(\"add\");\n//         //this.state.count=1; // <== [Warning] Do not mutate state directly. 이렇게 하면 안 됨. 이렇게 하면 render를 refresh하지 않음.\n//         this.setState(current => ({ count : current.count+1 }))\n//         // setState 부를 때마다 매번 리액트는 새로운 상태로 다시 render한다.★\n//     };\n//     minus = () => {\n//         // console.log(\"minus\");\n//         this.setState({ count : this.state.count-1 })\n//     };\n//     render(){ // <== class Component에는 render필요\n//         return (\n//             <div>\n//                 <h1>The number is: {this.state.count}</h1>\n//                 <button onClick={this.add}>Add</button>\n//                 <button onClick={this.minus}>Minus</button>\n//             </div>\n//         );\n//     }\n// }\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n// import App_old from './App_old';  // #2 JSX & Props 필기 및 실습\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// react application은 하나의 component만을 렌더링해야 한다.\n// ==> ex) ReactDOM.render(<App /><Potato />, document.getElementById('root'));  // Error.\n\n// #2 JSX & Props 필기 및 실습\n// ReactDOM.render(<App_old />, document.getElementById('root'));\n\n// <App/>: 컴포넌트.\n\n// <컴포넌트>: HTML을 반환하는 함수. ex) App.js의 function App(){...}\n// react는 컴포넌트를 사용해서 HTML처럼 작성할 수 있게 해준다.\n\n// <JSX>: javascript + HTML.\n// ex) const element = <h1>Hello, world!</h1>;\n"],"sourceRoot":""}